from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
)
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

TOKEN = "7729059470:AAHOp3bJ5nyLg7Z-4EyptjFHOmdJDeZ-Fpc"

CONTENT = {
    "start": (
        "üëã *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ ¬´–≠–ø–æ—Ö–∞ –ü–µ—Ç—Ä–∞ I¬ª!*\n\n"
        "‚ñ´Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é\n"
        "‚ñ´Ô∏è /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏"
    ),
    "menu": "üìú *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*",
    "reforms": (
        "‚ö°Ô∏è *–í–æ–µ–Ω–Ω—ã–µ —Ä–µ—Ñ–æ—Ä–º—ã –ü–µ—Ç—Ä–∞ I*\n\n"
        "1. –í–≤–µ–¥–µ–Ω–∏–µ —Ä–µ–∫—Ä—É—Ç—Å–∫–æ–π –ø–æ–≤–∏–Ω–Ω–æ—Å—Ç–∏ (1705)\n"
        "2. –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–π –∞—Ä–º–∏–∏\n"
        "3. –û—Å–Ω–æ–≤–∞–Ω–∏–µ –í–æ–µ–Ω–Ω–æ-–º–æ—Ä—Å–∫–æ–≥–æ —Ñ–ª–æ—Ç–∞"
    ),
    "conflicts": (
        "üî• *–ù–∞—Ä–æ–¥–Ω—ã–µ –≤–æ—Å—Å—Ç–∞–Ω–∏—è*\n\n"
        "1. –ê—Å—Ç—Ä–∞—Ö–∞–Ω—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–∏–µ (1705-1706)\n"
        "2. –í–æ—Å—Å—Ç–∞–Ω–∏–µ –ë—É–ª–∞–≤–∏–Ω–∞ (1707-1708)\n"
        "3. –ë–∞—à–∫–∏—Ä—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–∏–µ (1704-1711)"
    ),
    "historians": (
        "üìö *–ú–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∫–æ–≤*\n\n"
        "‚Ä¢ –ö–ª—é—á–µ–≤—Å–∫–∏–π: '–†–µ—Ñ–æ—Ä–º—ã –ø—Ä–æ–≤–æ–¥–∏–ª–∏—Å—å –Ω–∞—Å–∏–ª—å—Å—Ç–≤–µ–Ω–Ω–æ'\n"
        "‚Ä¢ –ê–Ω–∏—Å–∏–º–æ–≤: '–¶–µ–Ω–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π –±—ã–ª–∞ —Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∞'"
    ),
    "sources": (
        "üìñ *–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞*\n\n"
        "1. –ê–Ω–∏—Å–∏–º–æ–≤ –ï.–í. ¬´–ü–µ—Ç—Ä I: –±–ª–∞–≥–æ –∏–ª–∏ –∑–ª–æ –¥–ª—è –†–æ—Å—Å–∏–∏¬ª\n"
        "2. –ö–∞–º–µ–Ω—Å–∫–∏–π –ê.–ë. ¬´–†–æ—Å—Å–∏–π—Å–∫–∞—è –∏–º–ø–µ—Ä–∏—è –≤ XVIII –≤–µ–∫–µ¬ª"
    ),
}

QUESTIONS = [
    {
        "question": "–ö–∞–∫–æ–π –Ω–∞–ª–æ–≥ –≤–≤–µ–ª –ü–µ—Ç—Ä I –≤–º–µ—Å—Ç–æ –ø–æ–¥–≤–æ—Ä–Ω–æ–≥–æ –æ–±–ª–æ–∂–µ–Ω–∏—è?",
        "options": ["–ü–æ–¥—É—à–Ω–∞—è –ø–æ–¥–∞—Ç—å", "–ù–∞–ª–æ–≥ –Ω–∞ –æ–∫–Ω–∞", "–û–±—Ä–æ–∫"],
        "correct": 0
    },
    {
        "question": "–ß—Ç–æ –±—ã–ª–æ –≥–ª–∞–≤–Ω–æ–π —Ü–µ–ª—å—é ¬´–í–µ–ª–∏–∫–æ–≥–æ –ø–æ—Å–æ–ª—å—Å—Ç–≤–∞¬ª 1697-1698 –≥–≥.?",
        "options": [
            "–ü–æ–∏—Å–∫ —Å–æ—é–∑–Ω–∏–∫–æ–≤ –ø—Ä–æ—Ç–∏–≤ –®–≤–µ—Ü–∏–∏",
            "–ò–∑—É—á–µ–Ω–∏–µ –µ–≤—Ä–æ–ø–µ–π—Å–∫–∏—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π",
            "–û–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –≤–µ—Ä–Ω—ã"
        ],
        "correct": 2
    }
]

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
TEST_PREFIX = "test_"
BACK_BUTTON = "üîô –ù–∞–∑–∞–¥"


def main_menu_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üìå –†–µ—Ñ–æ—Ä–º—ã", callback_data="reforms")],
        [
            InlineKeyboardButton("‚öîÔ∏è –í–æ—Å—Å—Ç–∞–Ω–∏—è", callback_data="conflicts"),
            InlineKeyboardButton("üéì –ò—Å—Ç–æ—Ä–∏–∫–∏", callback_data="historians"),
        ],
        [
            InlineKeyboardButton("üìù –¢–µ—Å—Ç", callback_data="test"),
            InlineKeyboardButton("üìö –ò—Å—Ç–æ—á–Ω–∏–∫–∏", callback_data="sources"),
        ],
    ])


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(CONTENT["start"], parse_mode="Markdown")


async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        CONTENT["menu"],
        reply_markup=main_menu_keyboard(),
        parse_mode="Markdown"
    )


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    help_text = (
        "üîç *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
        "/start - –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/menu - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞"
    )
    await update.message.reply_text(help_text, parse_mode="Markdown")


async def handle_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()

    data = query.data

    if data == "menu":
        await show_menu(update)
    elif data == "test":
        await start_test(update, context)
    elif data in CONTENT:
        await show_content(update, data)


async def show_menu(update: Update) -> None:
    query = update.callback_query
    await query.edit_message_text(
        CONTENT["menu"],
        reply_markup=main_menu_keyboard(),
        parse_mode="Markdown"
    )


async def show_content(update: Update, content_key: str) -> None:
    query = update.callback_query
    await query.edit_message_text(
        CONTENT[content_key],
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton(BACK_BUTTON, callback_data="menu")]
        ])
    )


async def start_test(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    context.user_data.clear()
    context.user_data.update({
        "correct": 0,
        "current_question": 0,
        "test_message_id": None,
        "test_active": True
    })
    await send_question(update, context)


async def send_question(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not context.user_data.get("test_active"):
        return

    question_num = context.user_data["current_question"]
    try:
        question = QUESTIONS[question_num]
    except IndexError:
        await finish_test(update, context)
        return

    keyboard = [
        [InlineKeyboardButton(opt, callback_data=f"{TEST_PREFIX}{question_num}_{i}")]
        for i, opt in enumerate(question["options"])
    ]

    text = (
        f"‚ùì *–í–æ–ø—Ä–æ—Å {question_num + 1}/{len(QUESTIONS)}*\n"
        f"{question['question']}"
    )

    if context.user_data["test_message_id"]:
        await edit_message(update, context, text, keyboard)
    else:
        msg = await update.callback_query.message.reply_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
        context.user_data["test_message_id"] = msg.message_id


async def handle_test_answer(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()

    if not context.user_data.get("test_active"):
        return

    data = query.data[len(TEST_PREFIX):].split("_")
    question_num = int(data[0])
    answer_idx = int(data[1])

    if question_num != context.user_data["current_question"]:
        return

    if answer_idx == QUESTIONS[question_num]["correct"]:
        context.user_data["correct"] += 1

    context.user_data["current_question"] += 1
    await send_question(update, context)


async def edit_message(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str, keyboard: list) -> None:
    await context.bot.edit_message_text(
        chat_id=update.callback_query.message.chat_id,
        message_id=context.user_data["test_message_id"],
        text=text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="Markdown"
    )


async def finish_test(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    correct = context.user_data["correct"]
    total = len(QUESTIONS)
    text = (
        f"üìä *–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞*\n"
        f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {correct} –∏–∑ {total}\n\n"
        f"{'üéâ –ò–¥–µ–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!' if correct == total else 'üí™ –¢—Ä–µ–Ω–∏—Ä—É–π—Ç–µ—Å—å –µ—â—ë!'}"
    )

    await edit_message(
        update,
        context,
        text,
        [[InlineKeyboardButton(BACK_BUTTON, callback_data="menu")]]
    )
    context.user_data.clear()


def main() -> None:
    app = Application.builder().token(TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("menu", menu))
    app.add_handler(CommandHandler("help", help_command))

    app.add_handler(
        CallbackQueryHandler(handle_main_menu, pattern="^(menu|test|reforms|conflicts|historians|sources)$"))
    app.add_handler(CallbackQueryHandler(handle_test_answer, pattern=f"^{TEST_PREFIX}"))

    app.run_polling()


if __name__ == "__main__":
    main()